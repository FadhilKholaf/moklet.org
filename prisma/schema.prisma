// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Roles {
  SuperAdmin
  Admin
  OSIS
  MPK
  BDI
  PALWAGA
  PASKATEMA
  TSBC
  TSFC
  TSVC
  TSCC
  PMR
  MEMO
  MAC
  METIC
  COMET
  Guest
}

enum LinkType {
  User
  System
}

model User {
  id               String           @id @default(uuid()) @map("user_id") @db.Char(36)
  name             String
  email            String           @unique
  role             Roles            @default(Guest)
  user_pic         String
  userAuth         User_Auth?
  posts            Post[]
  forms            Form[]
  form_submissions Submission[]
  Link_Shortener   Link_Shortener[]
}

model User_Auth {
  id         String    @id @default(uuid()) @map("userauth_id") @db.Char(36)
  password   String?
  last_login DateTime?
  userEmail  String    @unique
  user       User      @relation(references: [email], fields: [userEmail], onDelete: Cascade)
}

model Post {
  id           String    @id @default(uuid()) @map("post_id") @db.Char(36)
  title        String
  view_count   Int       @default(0)
  description  String    @db.LongText
  content      String    @db.LongText
  tags         Tag[]
  created_at   DateTime  @default(now())
  published_at DateTime?
  updated_at   DateTime  @updatedAt
  published    Boolean   @default(false)
  user_id      String
  user         User      @relation(fields: [user_id], references: [id])
  slug         String    @unique
  thumbnail    String
  reaction     Json
  deleted      DateTime?
}

model Tag {
  tagName    String   @id
  created_at DateTime @default(now())
  posts      Post[]
}

model Form {
  id          String       @id @map("form_id")
  title       String
  description String?      @db.VarChar(255)
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  fields      Field[]
  submissions Submission[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  allow_edit  Boolean      @default(false)
  submit_once Boolean      @default(true)
  is_open     Boolean      @default(true)
  open_at     DateTime?
  close_at    DateTime?
}

enum Field_Type {
  text
  number
  email
  password
  longtext
  radio
  checkbox
}

model Field {
  id          Int                @id @default(autoincrement()) @map("field_id")
  label       String
  type        Field_Type
  required    Boolean            @default(false)
  form        Form               @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id     String
  options     Field_Option[]
  submissions Submission_Field[]
  fieldNumber Int                @default(0)
}

model Field_Option {
  id       Int    @id @default(autoincrement()) @map("field_option_id")
  value    String
  field    Field  @relation(fields: [field_id], references: [id], onDelete: Cascade)
  field_id Int
}

model Submission {
  id         String             @id @default(uuid()) @map("submission_id") @db.Char(36)
  form       Form               @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id    String
  user       User               @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt
  fields     Submission_Field[]
}

model Submission_Field {
  id            String     @id @default(uuid()) @map("submission_field_id") @db.Char(36)
  submission    Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade)
  submission_id String
  field         Field      @relation(fields: [field_id], references: [id], onDelete: Cascade)
  field_id      Int
  value         String     @db.LongText
}

model Link_Shortener {
  slug       String                @id @unique @db.VarChar(50)
  target_url String                @db.LongText
  user       User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  created_at DateTime              @default(now())
  updated_at DateTime              @updatedAt
  password   String?               @db.Char(32)
  type       LinkType              @default(User)
  count      Link_Shortener_Count?
}

model Link_Shortener_Count {
  id          String         @id @unique @db.VarChar(50)
  Link        Link_Shortener @relation(fields: [id], references: [slug], onDelete: Cascade)
  click_count Int            @default(0)
}

enum Kategori {
  KEOLAHRAGAAN
  KEAGAMAAN
  SENI_BAHASA
}

model Sub_Organ {
  id          String   @id @default(uuid()) @map("sub_organ_id") @db.Char(36)
  name        String   @unique
  logo        String
  description String   @db.LongText
  visi        String
  misi        String
  kontak      String
  struktur    String
  kategori    Kategori
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Organisasi {
  id          String   @id @default(uuid()) @map("sub_organ_id") @db.Char(36)
  name        String   @unique
  logo        String
  description String   @db.LongText
  visi        String
  misi        String
  kontak      String
  struktur    String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
